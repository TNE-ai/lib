---
# https://docs.github.com/en/actions/guides/building-and-testing-python
name: Python Lint

on: [push]

jobs:

  lint:
    #runs-on: ubuntu-latest
    runs-on: ubuntu-20.04
    # Note with this version testing you do not need tox in the cloud
    strategy:
      matrix:
        python-version: [ 3.7, 3.8, 3.9 ]

    steps:
      # checkout repo under $GITHUB_WORKSPACE
      - name: Checkout action
        uses: actions/checkout@v2

      # install latest python version
      - name: Setup python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Display Python version
        run: python --version

      - name: Cache pip
        uses: actions/cache@v2
        with:
          # Ubuntu specific path
          path: ~/.cache/pip
          # See if there is a cache hit
          key: ${{ runner.os }}-pip-${{ hashFiles('requirement.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f python/requirements.txt ]; then pip install -r python/requirements.txt; fi


      - name: Lint with flake8
        run: |
          pip install flake8
          flake8 --exclude ./model ./python

      - name: Lint with mypy
        run: |
          pip install mypy
          mypy --namespace-packages $(find . -name "*.py")

      - name: Lint with bandit
        run: |
          pip install bandit
          bandit $(find . -name "*.py")

      - name: Lint with pydocstyle
        run: |
          pip install pydocstyle
          pydocstyle --convention=google $(find . -name "*.py")

      - name: Reformat with black
        uses: psf/black@stable

      # you need all config files valid for this to work
      - name: Lint with yamllint
        run: |
          pip install yamllint
          yamllint $(find . -name "*.yaml")

      # assumes python in in the subdirectory ./python
      - name: Test with pytest
        run: |
          pip install pytest pytest-cov
          pytest --cov=python --doctest-modules --junitxml=junit/test-results.xml --cov-report=xml --cov-report=html
